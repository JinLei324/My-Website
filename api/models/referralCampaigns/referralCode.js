'use strict'
const joi = require('joi')
const db = require('../../library/mongodb');
const moment = require('moment')
const tableName = 'referralCodes'
const ObjectID = require('mongodb').ObjectID;

/** 
 * @function
 * @name insert a new offer 
 * @param {object} params - data coming from controller
 */
const postReferralCode = (refferalData, callback) => {
    db.get().collection(tableName)
        .insert(
            refferalData,
            (err, result) => {
                return callback(err, result);
            });
}

const getDetailsByCode = (referralCode, callBack) => {
    db.get().collection(tableName)
        .find({
            referralCode: referralCode
        }).toArray((err, result) => {
            return callBack(err, result);
        });
}

const updateReferals = (referralCode, callBack) => {
    db.get().collection(tableName).findOneAndUpdate({
            "_id": new ObjectID(referralCode.id)
        }, {
            $push: {
                "referrals": {
                    userId: referralCode.userId,
                    registeredOn: referralCode.registeredOn,
                    userType: referralCode.userType,
                    firstname: referralCode.firstname,
                    lastName: referralCode.lastName,
                    email: referralCode.email,
                    countryCode: referralCode.countryCode,
                    phoneNumber: referralCode.phoneNumber

                }

            },

            $inc: {
                "totalRefers": 1
            }
        }, {
            returnOriginal: false
        },


        (err, result) => {
            return callBack(err, result);
        });
}

const getReferralCodeByUserId = (userId, callBack) => {
    db.get().collection(tableName)
        .findOne({
            userId: userId
        }, (err, result) => {
            return callBack(err, result);
        });
}

/*
@ Update referral code data with with campaignId for new user
 */
const updateCampaignIdWithNewUser = (data, callBack) => {

    db.get().collection(tableName).findOneAndUpdate({
            "userId": data.userId
        }, {
            $set: {
                "campaignId": data.campaignId,
                "referrerName": data.referrerName,
                "referrerId": data.referrerId

            }
        }, {
            returnOriginal: false
        },
        (err, result) => {
            return callBack(err, result);
        });
}

/*
@function to update referrer data with campaign id inside user referrer data
 */
const updateCampaignIdWithReferrerData = (data, callBack) => {

    db.get().collection(tableName).update({
            "userId": data.referrerId,
            "referrals.userId": data.newUserId
        }, {
            $set: {
                "referrals.$.campaignId": data.campaignId
            },
        },
        (err, result) => {
            return callBack(err, result);
        });
}

/*Get referrals codes generated under campaign */

const getReferalsByCampaignId = (requestData, callback) => {
    db.get().collection(tableName).find({
            "campaignId": requestData.campaignId
        }).skip(requestData.offset).limit(requestData.limit).sort({
            '_id': -1
        })
        .toArray((err, result) => {
            return callback(err, result);
        });
}

/*
Get total referral codes generated by referral campaign id 
 */
const getCodesGeratedCountByID = (campaignId, callBack) => {
    db.get().collection(tableName).count({
            'campaignId': campaignId
        },
        (err, result) => {
            return callBack(err, result);
        });
}

/*
Increase total refers to 1 
 */

const increaseReferralCountByUserId = (userId, callback) => {
    db.get().collection(tableName).update({
            "userId": userId
        }, {
            $inc: {
                "totalRefers": 1
            }
        },


        (err, result) => {
            return callback(err, result);
        });
}

const getReferrerDetailsByNewUserId = (userId, callBack) => {

    db.get().collection(tableName)
        .findOne({
            "referrals.userId": userId
        }, (err, result) => {
            return callBack(err, result);
        });
}

const getTotalReferralsDataByCampaignId = (data, callBack) => {

    db.get().collection(tableName)
        .find({
            "userId": data.userId,
            "referrals.campaignId": data.referralCampaignId
        }, 
        {
            'referrals.$': 1,
            'userId': 1
        }).skip(data.offset).limit(data.limit).sort({
            '_id': -1
        })
        .toArray((err, result) => {
            return callBack(err, result);
        });



}

const getTotalReferralsCountByCampaignId = (data, callBack) => {

    db.get().collection(tableName)
        .count({
            "userId": data.userId,
            "referrals.campaignId": data.campaignId
        }, {
            'referrals.$': 1,
            'userId': 1
        }, (err, result) => {
            return callBack(err, result);
        });
}


module.exports = {
    postReferralCode,
    getDetailsByCode,
    updateReferals,
    getReferralCodeByUserId,
    updateCampaignIdWithNewUser,
    updateCampaignIdWithReferrerData,
    getReferalsByCampaignId,
    getCodesGeratedCountByID,
    increaseReferralCountByUserId,
    getReferrerDetailsByNewUserId,
    getTotalReferralsDataByCampaignId,
    getTotalReferralsCountByCampaignId


}